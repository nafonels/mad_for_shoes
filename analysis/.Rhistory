# [실습] Factor Nominal 변수 내용 보기
Ngender
# [실습] 문자 벡터와 그래프 생성
gender <- c('man', 'woman', 'woman', 'man', 'man')
plot(gender)
# [실습]  as.factor() 함수 이용 요인형 변환
Ngender <- as.factor(gender)
table(Ngender)
# [실습] Factor형 변수로 차트 그리기
plot(Ngender)
mode(Ngender)
class(Ngender)
is.factor(Ngender)
# [실습] Factor Nominal 변수 내용 보기
Ngender
# [실습] factor() 함수 이용 Factor형 변환
args(factor)
Ngender = null
Ngender = Null
Ngender = NULL
Ngender
str(women)
# [실습]  함수 사용 예제 보기
example(seq)
# [실습] 평균을 구해주는 mean() 함수 사용 예
example(mean)
# [실습]  벡터의 행 우선으로 행렬 객체 생성
m <- matrix(c(1:10), nrow=2, byrow=T) # 행 우선
m
# [실습] 행 묶음으로 행렬 객체 생성
x1 <- c(5,40,50:52)
x2 <- c(30,5,6:8)
mr <- rbind(x1,x2)
mr
# [실습] 열 묶음으로 행렬 객체 생성
mc <- cbind(x1,x2)
mc
# [실습] 2행으로 행렬 객체 생성
m3 <- matrix(10:19, 2) #10개 데이터를 2행으로 생성
m3
# 자료와 객체 Type 보기
mode(m3); class(m3) #numeric, matrix
m3[,5] # 5열 전체
# [실습] 3행 3열로 행렬 객체 생성
x <- matrix(c(1:9), nrow=3, ncol=3) # 3행 3열 matrix 객체
x
# [실습] 자료의 개수 보기
length(x) # 데이터 개수
ncol(x); nrow(x) # 열/행 수
# [실습] apply() 함수 적용
x
apply(x,1,max) # 행 단위 최대값
apply(x,1,min) # 행 단위 최대값
apply(x,2,mean) # 열 단위 평균값
# [실습] 사용자 정의 적용
f <- function(x){ # x 매개변수
x * c(1,2,3)
}
result <- apply(x, 1, f)
result
x <- matrix(c(1:9), nrow=3, ncol=3) # 3행 3열 matrix 객체
x
member
# [실습] key와 value 형식으로 리스트 생성
member <- list(name=c("홍길동","유관순"),age = c(35, 25),
address=c("한양","충남"),
gender=c("남자", "여자"), htype=c("아파트","오피스텔") )
member
member$name
# [실습] key를 이용하여 value에 접근하기
member$age <- 45  # 원소 수정
member$id <- "hong" # 원소 추가
member$pwd <- "1234" # 원소 추가
member
member$age <- NULL  # 원소 제거
member
# [실습] c() 함수 이용 벡터 객체 생성
c(1:20) # 콜론 : 범위
1:20
5:10
5:10:3
10:3
# [실습] '변수.멤버' 형태로 변수선언 예
goods.code <- 'a001' # 상품 코드
goods.name <- '냉장고'  # 상품명
goods.price <- 850000  # 가격
goods.des <- "최고사양, 동급 최고 품질"  # 상품설명
goods
# [실습] 기본 데이터 셋으로 히스토그램 그리기
# 단계 1 : 빈도수(frequency)를 기준으로 히스토그램 그리기
hist(Nile)
# [실습] 히스토그램을 파일에 저장하기
pdf("C:/crack/test.pdf") # 지정된 경로의 파일에 결과 출력
par(mfrow=c(2,2)) # Plots 영역에 1개 그래프 표시
hist(rnorm(20)) # 난수에 대한 히스토그램 그리기
hist(Nile)
hist(Nile, freq = F)
lines(density(Nile))
dev.off()
# [실습] 문자 벡터와 그래프 생성
gender <- c('man', 'woman', 'woman', 'man', 'man')
plot(gender)
# [실습]  as.factor() 함수 이용 요인형 변환
Ngender <- as.factor(gender)
table(Ngender)
# [실습] Factor형 변수로 차트 그리기
plot(Ngender)
Ngender <- as.factor(gender)
# [실습] 히스토그램을 파일에 저장하기
pdf("C:/crack/test.pdf") # 지정된 경로의 파일에 결과 출력
par(mfrow=c(2,2)) # Plots 영역에 1개 그래프 표시
hist(rnorm(20)) # 난수에 대한 히스토그램 그리기
hist(Nile)
hist(Nile, freq = F)
lines(density(Nile))
gender <- c('man', 'woman', 'woman', 'man', 'man')
Ngender <- as.factor(gender)
plot(Ngender)
dev.off()
plot(women)
str(women)
## 3. 패키지와 Session 보기
# [실습] R 패키지 보기
dim(available.packages())
available.packages()
# [실습] R 세션 보기
sessionInfo()
# version, 다국어(locale) 정보, 설치된 패키지(7개)
# [실습] 패키지 사용법
install.packages("stringr") # "패키지명"
install.packages()  # 패키지 설치 확인
library(stringr) # 메모리 로딩
search() # 패키지 메모리 로딩 확인
# [실습] 패키지 제거
remove.packages('stringr')
# [실습] 데이터 셋 보기
data()
# [실습] 기본 데이터 셋으로 히스토그램 그리기
# 단계 1 : 빈도수(frequency)를 기준으로 히스토그램 그리기
hist(Nile)
# 단계 2 : 밀도(density)를 기준으로 히스토그램 그리기
hist(Nile, freq = F) # frequency 속성을 FALSE로 지정
# 단계 3 : 단계 2의 결과에 분포곡선(line)을 추가
lines(density(Nile))
# [실습] 히스토그램을 파일에 저장하기
pdf("C:/crack/test.pdf") # 지정된 경로의 파일에 결과 출력
par(mfrow=c(2,2)) # Plots 영역에 1개 그래프 표시
hist(rnorm(20)) # 난수에 대한 히스토그램 그리기
hist(Nile) # 기본제공 data Nile에 대한 히스토그램
hist(Nile, freq = F) # 히스토그램에 freq를 F로 주어 빈도가 아닌 밀도로 표기
lines(density(Nile)) # 밀도에 대한 line을 그어준다.(마지막hist에)
gender <- c('man', 'woman', 'woman', 'man', 'man') #스트링으로된 벡터데이터 생성
Ngender <- as.factor(gender) # 벡터를 팩터로 자료 형 변환
plot(Ngender) # 팩터로 형변환하여 그래프를 그리면, 빈도수로 그래프를 그려준다.
dev.off()   # 최종으로 pdf를 저장한다.
## 4. 변수와 자료형
# [실습] 변수 사용 예
var1 <- 0 # 변수 var1에 값 0으로 초기화 (var1 = 0 사용 가능)
var1 # 변수 var1의 값을 확인 즉, var1 변수값을 콘솔에 출력한다.
var1 <- 1  # 변수 var1의 값을 1로 변경(변수 재사용)
var1 # 변수 var1의 값을 확인
var2 <- 2  # 변수 var2를 생성하고 값 2로 초기화
var2 # 변수 var2의 값을 확인
var3 <- 3 # 변수 var3을 생성하고 값 3으로 초기화
var3 # 변수 var3의 값을 확인
# [실습] '변수.멤버' 형태로 변수선언 예
goods.code <- 'a001' # 상품 코드
goods.name <- '냉장고'  # 상품명
goods.price <- 850000  # 가격
goods.des <- "최고사양, 동급 최고 품질"  # 상품설명
goods
install.packages("stringr")
getwd()
gd = read.csv('d:/GDP.csv')
head(gd,10)
gd = read.csv('d:/GDP.csv', haeder=FALSE, sep='\t')
gd = read.csv('d:/GDP.csv', haeder=F, sep='\t')
gd = read.csv('d:/GDP.csv', sep='\t')
head(gd,10)
gdp = read.csv('http://databank.worldbank.org/data/download/GDP.csv')
gdp = read.csv('http://databank.worldbank.org/data/download/GDP.csv', header = FALSE)
head(gdp,10)
gdp = gdp[-c(1:5),c(1,2,4,5)]
gdp
head(gdp,10)
tail(gdp, 10)
tail(gdp, 100)
install.packages("httr")
install.packages("XML")
library(stringr)
install.packages('lattice')
library(mlmRev)
install.packages('mlmRev')
library(mlmRev)
install.packages('rJava')
install.packages('DBI')
install.packages('RJDBC')
install.packages('gmodels')
install.packages('Hmisc')
install.packages('prettyR')
install.packages('car')
/?scan()
scan()/?
memdata$age2[memdata$age>10 & memdata$age <20] <- '10대'
library(plyr)
library(dplyr)
getwd()
memdata = read.csv('./member.csv',header = T, encoding = 'utf-8')
bodata = read.csv('./board.csv',header = T, encoding = 'utf-8')
memdata
bodata
b = read.csv('./board.csv',header = T, encoding = 'utf-8')
m = read.csv('./member.csv',header = T, encoding = 'utf-8')
m$성별
m$성별2 = factor(m, labels = c('남자','여자'), levels = c('1','2'))
m
m$성별2
m$sex2 = factor(m, labels = c('남자','여자'), levels = c('1','2'))
m$sex2 <- factor(m, labels = c('남자','여자'), levels = c('1','2'))
m
m$sex2 <- factor(m, labels = c('남자','여자'), levels = c(1,2))
m
m$sex2 <- factor(m$성별, labels = c('남자','여자'), levels = c(1,2))
m
m$sex2 <- factor(m$성별, labels = c(1,2), levels = c('남자','여자'))
m
m$적립포인트2[ifelse(m$적립포인트>=200,'우수고객','일반고객')]
m
m$적립포인트2[m$적립포인트>=200]<-'우수고객'
m$적립포인트2[m$적립포인트<200]<-'일반고객'
m
b
b$조회수2[b$조회수>=3]='좋음'
b
b$조회수2[b$조회수<3]='나쁨'
b$조회수2[b$조회수>=3]='좋음'
ㅡ
m
b
library(plyr)
joinData = join(m, b, by='아이디', type ='full')
joinData
View(joinData)
ㅠ
B
b
m
library(plyr)
joinData = join(m, b, by='아이디')
joinData
library(dplyr)
filter(joinData, 일련번호==3 or 일련번호==1)
filter(joinData, 일련번호==3 | 일련번호==1)
select(joinData, 이름, 급여, 작성일자)+filter(joinData, 일련번호==3 | 일련번호==1)
select(joinData, 이름, 급여, 작성일자)+filter(일련번호==3 | 일련번호==1)
filter(joinData,일련번호==3 | 일련번호==1)+select(joinData, 이름, 급여, 작성일자)
filter(joinData,일련번호==3 | 일련번호==1)+select(이름, 급여, 작성일자)
filter(joinData,일련번호==3 | 일련번호==1)+select(joinData,이름, 급여, 작성일자)
filter(joinData,일련번호==3 | 일련번호==1)
filterData = filter(joinData,일련번호==3 | 일련번호==1)
select(filterData, 이름, 급여, 작성일자)
filterData = filter(joinData,일련번호==3 | 일련번호==1)
filterData= order(filterData, -일련번호)
filterData= order(filterData, -일련번호)
filterData
arrange(filterData, desc(일련번호))
select(filterData, 이름, 급여, 작성일자)
filter(joinData,일련번호==3 | 일련번호==1) %>% arrange(desc(일련번호)) %>%select(filterData, 이름, 급여, 작성일자)
filter(joinData,일련번호==3 | 일련번호==1) %>% arrange(desc(일련번호)) %>%select( 이름, 급여, 작성일자)
joinData$조회수
select(joinData,조회수 )
newdata= summarise(joinData, mean(조회수, na.rm=TRUE)*100, sum(적립포인트) )
newdata
install.packages('cluster')
table(memdata$성별)
# 결측치 있을 경우 평균 구하기
an_mean = mean(memdata$급여, na.rm = T)
memdata = read.csv('./member.csv',header = T, encoding = 'utf-8',sep = ',')
summary(memdata$성별) #결측치 확인
# 결측치 있을 경우 평균 구하기
an_mean = mean(memdata$급여, na.rm = T)
an_mean
shapiro.test(memdata$급여)
hist(memdata$급여)
qqnorm(memdata$급여)
qqline(memdata$급여, lty=1, col='red')
# 정규분포임을 확인했으니, t검정 실시
t.test(memdata$급여, mu=5200, ater='tow.side', conf.level = 0.95)
# 정규분포임을 확인했으니, t검정 실시
t.test(memdata$급여, mu=52000, ater='tow.side', conf.level = 0.95)
memdata = read.csv('./sampleData/지지율01.csv',header = T, encoding = 'utf-8',sep = ',')
getwd()
memdata = read.csv('./sampleData/gigi01.csv',header = T, encoding = 'utf-8',sep = ',')
memdata = read.csv('./sampleData/gigi01.csv',header = T, encoding = 'utf-8')
memdata = read.csv('./sampleData/gigi01.csv', encoding = 'utf-8')
memdata = read.csv('./R_Lec/sampleData/gigi01.csv',header = T, encoding = 'utf-8',sep = ',')
memdata
## 단일집단 평균 분석
summary(memdata$age) #결측치 확인
# 결측치 있을 경우 평균 구하기
an_mean = mean(memdata$age, na.rm = T)
an_mean
#정규분포를 검정으로 정규분포인지 확인
# stats 패키지의 shapiro.test()
library(stats)
shapiro.test(memdata$age)
hist(memdata$age)
qqnorm(memdata$age)
qqline(memdata$age, lty=1, col='red')
shapiro.test(memdata$age)
# 정규분포임을 확인했으니, 단일표본 t검정 실시
t.test(memdata$age, mu=52000, alter='tow.side', conf.level = 0.95)
# 정규분포임을 확인했으니, 단일표본 t검정 실시
t.test(memdata$age, mu=52000, ater='tow.side', conf.level = 0.95)
#정규분포가 아니면 wilcox.test()를 수행한다.
wilcox.test(age~Factor,data = memdata, alternative = c("two.sided"), mu = 0, conf.level = 0.95)
an_mean
#정규분포가 아니면 wilcox.test()를 수행한다.
wilcox.test(age,data = memdata, alternative = c("two.sided"), mu = 0, conf.level = 0.95)
#정규분포가 아니면 wilcox.test()를 수행한다.
wilcox.test(memdata$age,data = memdata, alternative = c("two.sided"), mu = 0, conf.level = 0.95)
memdata
shapiro.test(memdata$age)
# 0.05 <= p-vlaue 이면 정규분포로 보ㅗ고 t검정으로 검증 수행한다.
hist(memdata$age)
qqnorm(memdata$age)
qqline(memdata$age, lty=1, col='red')
# 정규분포임을 확인했으니, 단일표본 t검정 실시
t.test(memdata$age, mu=52000, ater='tow.side', conf.level = 0.95)
# 정규분포임을 확인했으니, 단일표본 t검정 실시
t.test(memdata$age, mu=44, ater='tow.side', conf.level = 0.95)
#정규분포가 아니면 wilcox.test()를 수행한다.
wilcox.test(memdata$age~memdata$prefer,data = memdata, alternative = c("two.sided"), mu = 0, conf.level = 0.95)
#정규분포가 아니면 wilcox.test()를 수행한다.
wilcox.test(memdata$age, data = memdata, alternative = c("two.sided"), mu = 0, conf.level = 0.95)
#정규분포가 아니면 wilcox.test()를 수행한다.
wilcox.test(memdata$age, alternative = c("two.sided"), mu = 0, conf.level = 0.95)
#정규분포가 아니면 wilcox.test()를 수행한다.
wilcox.test(memdata$age, alternative = c("two.sided"), mu = 44, conf.level = 0.95)
#정규분포가 아니면 wilcox.test()를 수행한다.
wilcox.test(memdata$age, alternative = c("two.sided"), mu = 44, conf.level = 0.95)
#정규분포가 아니면 wilcox.test()를 수행한다. 비모수검정
wilcox.test(memdata$age, alternative = 'two.sided', mu = 44, conf.level = 0.95)
cat(low+'< Z <'+ height)
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 신뢰구간  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2
N = 10000 #전체 표본크기
X = 165.1 #전체 평균
S = 2 # 전체 표준편차
C = 1.96 # 95%신뢰도의 Z값
low = X-C*S/sqrt(N)
heighr = X+C*S/sqrt(N)
cat(low+'< Z <'+ height)
cat(low,'< Z <', height)
height = X+C*S/sqrt(N)
cat(low,'< Z <', height)
cat('신뢰수준 95%의 모평균 신뢰구간 : ',low,'< u <', height)
cat('신뢰수준 95%의 모평균 신뢰구간 : ',low,'≤ u ≤', height)
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 허용오차 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2
#±Z√p(1-p)/n [n:표본수, p:확률]
n = 1500 #1500명
z = 1.96 # 95% 신뢰수준의 z값
ok = 0.55 #찬성 55%
no = 1-ok # 반대 45%
x = z*sqrt((ok*no)/n)
x
h
h = ok*no
h
x = z*sqrt(h/n)
x
y = h/n
y
y = sqrt(h/n)
y
x = z*sqrt(h/n)
x
x = z*y
x
x * 100
z*sqrt((ok*no)/n)*100
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@상관관계분석 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2
# 로지스틱 회귀분석
pimaData = read.csv('pima-indians-diabetes.csv', header=F, encoding = 'utf-8', col.names = c('pregnant','pressure','insulin','pedigree','class','plasma','thickness','BIM','age'))
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@상관관계분석 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2
# 로지스틱 회귀분석
pimaData = read.csv('./R_Lec/sampleData/pima-indians-diabetes.csv', header=F, encoding = 'utf-8', col.names = c('pregnant','pressure','insulin','pedigree','class','plasma','thickness','BIM','age'))
head(pimaData)
View(pimaData$class)
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@상관관계분석 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2
# 로지스틱 회귀분석
pimaData = read.csv('./R_Lec/sampleData/pima-indians-diabetes.csv', header=F, encoding = 'utf-8', col.names = c('pregnant','plasma','pressure','thickness','insulin','BIM','pedigree','age','class'))
head(pimaData)
View(pimaData$class)
#자료 샘플링
idx = sample(1:nrow(pimaData), nrow(pimaData)*0.7)#70%데이터의 인덱스
trainData = pimaData[idx,]
testData = pimaData[-idx,]
# 로지스틱 회귀 모델 생성
pimaModel = glm(class~.,data = trainData, family='binomial')
plot(pimaData)
pimaModel
plot(pimaData)
library(corrgram)
install.packages('corrgram')
cor(pimaData, method = 'pearson')
library(corrgram)
corrgram(pimaData, upper.panel = panel.conf)
# plasma가 가장 큰 영향을 준다.
library(PerformanceAnalytics)
install.packages('PerformanceAnalytics')
# plasma가 가장 큰 영향을 준다.
library(PerformanceAnalytics)
chart.Correlation(pimaData, histogram = , pch='o')
chart.Correlation(pimaData, histogram = , pch='.')
#정규분포가 아니면 wilcox.test()를 수행한다. 비모수검정
wilcox.test(memdata$age, alternative = 'two.sided', mu = 44, conf.level = 0.95)
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 신뢰구간  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2
N = 100 #전체 표본크기
X = 3000 #전체 평균
S = 200 # 전체 표준편차
C = 2.575 # 95%신뢰도의 Z값
low = X-C*S/sqrt(N)
height = X+C*S/sqrt(N)
cat('신뢰수준 99%의 모평균 신뢰구간 : ',low,'≤ u ≤', height)
825/1500
1500-675
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 허용오차 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2
#±Z√p(1-p)/n [n:표본수, p:확률]
n = 1500
n = 1500
z = 1.96
ok = 825/1500
no = 1-ok
z*sqrt((ok*no)/n)*100
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@상관관계분석 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2
# 상관관계 분석
pimaData = read.csv('./R_Lec/sampleData/pima-indians-diabetes.csv', header=F, encoding = 'utf-8', col.names = c('pregnant','plasma','pressure','thickness','insulin','BIM','pedigree','age','class'))
cor(pimaData, method = 'pearson')
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@상관관계분석 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2
# 상관관계 분석
pimaData = read.csv('./R_Lec/sampleData/pima-indians-diabetes.csv', header=F, encoding = 'utf-8')
cor(pimaData, method = 'pearson')
cor(pimaData, method = 'pearson')
library(corrgram)
corrgram(pimaData, upper.panel = panel.conf)
cor(pimaData, method = 'pearson')
library(PerformanceAnalytics)
chart.Correlation(pimaData, histogram = , pch='.')
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 두집단의 비율검정  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2
#prop.test()분석
tworateData = read.csv('./R_Lec/sampleData/gigi01.csv',header = TRUE, encoding = 'utf-8')
# 귀무가설 : 두가지 교육방법에 따라 교육생의 만족률에 차이가 없다.
#data 전처리
summary(tworateData) #결측치 등 확인
# subset 생성 : 가져온 data 중 필요한 대상의 column을 가져온다.
x = towrateData$x
y = towrateData$y
table(x,y,useNA = 'no')
# subset 생성 : 가져온 data 중 필요한 대상의 column을 가져온다.
str(tworateData)
tworateData$age2[tworateData$age>=20 & tworateData$age<60] = '20'
# subset 생성 : 가져온 data 중 필요한 대상의 column을 가져온다.
str(tworateData)
tworateData$age2[tworateData$age>=20 & tworateData$age<60] = '20대'
tworateData$age2[tworateData$age>=60] ='60대'
tworateData
x = tworateData$age2
y = tworateData$prefer
table(x,y,useNA = 'no')
table(x)
table(y)
prop.test(c(16,4), c(20,20), alternative='twosided', conf.level = 0.95)
prop.test(c(16,4), c(20,20), alternative='greater', conf.level = 0.95)
studData = read.csv('./R_Lec/sampleData/student_height.csv',header = T)
str(studData)
summary(studData)
library(stats)
shapiro.test(studData$height)
sampleData=sample(studData$height,50)
str(sampleData)
summary(sampleData)
shapiro.test(sampleData)
wilcox.test(sampleData, alternative = 'two.sided', mu = 148.5, conf.level = 0.95)
getwd()
setwd('D:/dev_app/publicCode/studyProject/madforshoes')
getwd()
setwd('D:/dev_app/publicCode/studyProject/madforshoes/analysis')
library(jsonlite)
opjson = fromJSON('./data/airmax97/airmax97_twit_post_final_1.json')
opjson
View(opjson)
